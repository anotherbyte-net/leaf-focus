name: Create Package

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  test_lint:
    name: Test and lint Python code
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11-dev" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          echo "::group::Pip dependencies"
          python -m pip install --upgrade -r requirements-dev.txt -r requirements.txt
          echo "::endgroup::"

      - name: Run tests and linters
        run: |
          echo "::group::Tests - Run tests with coverage"
          python -X dev -m coverage run -m pytest --tb=line --doctest-modules \
            --junitxml=artifacts-${{ matrix.python-version }}/pytest-coverage.xml || true
          echo "::endgroup::"
          
          echo "::group::Tests - Coverage report"
          python -X dev -m coverage report || true
          echo "::endgroup::"
          
          echo "::group::Linter - mypy"
          python -X dev -m mypy --junit-xml artifacts-${{ matrix.python-version }}/mypy.xml src || true
          echo "::endgroup::"
          
          echo "::group::Linter - black"
          python -X dev -m black --check src || true
          echo "::endgroup::"
          
          echo "::group::Linter - pylint"
          python -X dev -m pylint src || true
          echo "::endgroup::"
          
          echo "::group::Linter - pydocstyle"
          python -X dev -m pydocstyle src || true
          echo "::endgroup::"
          
          echo "::group::Linter - pyright"
          python -X dev -m pyright src || true
          echo "::endgroup::"
          
          echo "::group::Linter - flake8"
          python -X dev -m flake8 src --count --show-source --statistics --exit-zero
          echo "::endgroup::"
          
          echo "::group::Linter - pytype"
          python -X dev -m pytype -j auto || true
          echo "::endgroup::"

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.python-version }}
          path: artifacts-${{ matrix.python-version }}/*.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  build_publish:
    name: Build and publish Python package
    runs-on: ubuntu-latest
    needs: test_lint
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          echo "::group::Pip dependencies"
          python -m pip install --upgrade -r requirements.txt
          echo "::endgroup::"

      - name: Build a binary wheel and a source tarball
        run: |
          echo "::group::Build package"
          python -m build --sdist --wheel --outdir dist/ .
          echo "::endgroup::"

      - name: Publish distribution ðŸ“¦ always to Test PyPI
        if: github.event_name != 'pull_request'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ if tagged to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
